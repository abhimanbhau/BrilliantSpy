<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.NET-Encryption-Library</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.Adler32">
            <summary>
            Adler file checksum
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.Adler32.BASE">
            <summary>
            Prime number before 65536
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Adler32.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Adler32.Reset">
            <summary>
            Default checksum to 1
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Adler32.GetFileAdler32(System.String)">
            <summary>
            Get the Adler32 Checksum for a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Adler32.Process(System.Int32)">
            <summary>
            Combine the passed value with the current checksum
            </summary>
            <param name="value">
            The value to add to the checksum
            </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Adler32.Process(System.Byte[])">
            <summary>
            Get the checksum of the passed bytes
            </summary>
            <param name="buffer">
            Array to process
            </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Adler32.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate the checksum of the passed bytes
            </summary>
            <param name="buffer">
            Byte array
            </param>
            <param name="start">
            The initial byte to process
            </param>
            <param name="length">
            Length of bytes to process
            </param>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Adler32.Checksum">
            <summary>
            Adler32 Checksum
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.AsymmetricKeyPair">
            <summary>
            A public and private key for an asymmetric algorithm
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.AsymmetricKeyPair.PublicKeyOnly">
            <summary>
            Public Asymmetric Encryption Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.AsymmetricKeyPair.PublicPrivateKeyPair">
            <summary>
            Public and Private Encryption Key
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.RsaEncryption">
            <summary>
            RSA Encryption
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.BaseEncryption">
            <summary>
            BaseEncryption class from which everything derrives
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.IEncryption">
            <summary>
            Base Encryption Interface
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.EncryptBytes(System.String,System.Byte[])">
            <summary>
            Encrypt bytes with the key
            </summary>
            <param name="key"></param>
            <param name="dataToEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.DecryptBytes(System.String,System.Byte[])">
            <summary>
            Decrypt bytes with the key
            </summary>
            <param name="key"></param>
            <param name="dataToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.EncryptString(System.String,System.String)">
            <summary>
            Encrypt a string with the key and encode with base64
            </summary>
            <param name="key"></param>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.DecryptString(System.String,System.String)">
            <summary>
            Decrypt a string with the key 
            </summary>
            <param name="key"></param>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.EncryptStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Encrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputStream"> </param>
            <param name="outputStream"> </param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.DecryptStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputStream"> </param>
            <param name="outputStream"> </param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.EncryptFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Encrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.IEncryption.DecryptFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Decrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <param name="useBase64"> </param>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.IEncryption.KeySize">
            <summary>
            The size of the key
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.IEncryption.EncodingMethod">
            <summary>
            The encoding method to use, the default is UTF8
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.EncryptBytes(System.String,System.Byte[])">
            <summary>
            Encrypt bytes with the key
            </summary>
            <param name="key"></param>
            <param name="dataToEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.DecryptBytes(System.String,System.Byte[])">
            <summary>
            Decrypt bytes with the key
            </summary>
            <param name="key"></param>
            <param name="dataToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.EncryptStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Encrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputStream"> </param>
            <param name="outputStream"> </param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.DecryptStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputStream"> </param>
            <param name="outputStream"> </param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.EncodeBase64(System.Byte[])">
            <summary>
            Encode bytes with Base64
            </summary>
            <param name="input">Bytes to encode</param>
            <returns>Base64 string OR string.emtpy on error</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.EncryptFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Encrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.DecryptFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Decrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.EncryptString(System.String,System.String)">
            <summary>
            Encrypt a string with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.DecryptString(System.String,System.String)">
            <summary>
            Decrypt a string with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.KeySize">
            <summary>
            The Key Size to use 
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.MaxEncryptedBytes">
            <summary>
            The maximum number of bytes the provider can encrypt
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BaseEncryption.EncodingMethod">
            <summary>
            Set the encoding method used for converting unicode strings into bytes.  The default is UTF8
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.RsaEncryption.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.RsaEncryption.CreateKeys">
            <summary>
            Create public and private keys
            </summary>
            <returns>Public and private key pairs</returns>
            <see cref="!:http://en.wikipedia.org/wiki/RSA_%28algorithm%29"/>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.RsaEncryption.EncryptStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Encrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputStream"> </param>
            <param name="outputStream"> </param>
            <param name="useBase64"> </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.RsaEncryption.DecryptStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decrypt a file with the passed key
            </summary>
            <param name="key"></param>
            <param name="inputStream"> </param>
            <param name="outputStream"> </param>
            <param name="useBase64"> </param>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.AsymmetricEncryption.RsaEncryption.DoOAEPPadding">
            <summary>
            If true then pad with OAEP.  Default is true
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Common.PrefixMatch(System.Byte[])">
            <summary>
            Returns true if the bytes match the prefix
            </summary>
            <param name="inputBytes"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Common.CopyByteArray(System.Byte[],System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Copy a Byte Array starting at a source copy position and a dest copy position 
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="sourceStart"></param>
            <param name="destStart"></param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.GZipCompressMemoryStream(System.IO.Compression.CompressionMode,System.IO.MemoryStream)">
            <summary>
            Compress a memory stream with Gzip
            </summary>
            <param name="mode"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.DeflateCompressMemoryStream(System.IO.Compression.CompressionMode,System.IO.MemoryStream)">
            <summary>
            Compress a memory stream with deflate
            </summary>
            <param name="mode"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.DeflateDecompressMemoryStream(System.IO.MemoryStream)">
            <summary>
            Decompress a Memory stream compress with Deflate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.GZipDecompressMemoryStream(System.IO.MemoryStream)">
            <summary>
            Decompress a Memory stream compress with GZip
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.GZipCompressStream(System.IO.Stream)">
            <summary>
            Compress a stream using Gzip
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.DeflateCompressStream(System.IO.Stream)">
            <summary>
            Compress a stream using Deflate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.DeflateDecompressStream(System.IO.Stream)">
            <summary>
            Decompress a stream compress with Deflate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.GZipDecompressStream(System.IO.Stream)">
            <summary>
            Decompress a stream compress with GZip
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.DeflateCompressFile(System.String,System.String)">
            <summary>
            Compress a file with the deflate algorithim
            </summary>
            <param name="mode"></param>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.GZipCompressFile(System.String,System.String)">
            <summary>
            Compress a file with the GZip algorithim
            </summary>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.GZipDecompressFile(System.String,System.String)">
            <summary>
            Decompress a file using Gzip Algorithm
            </summary>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Compression.DeflateDecompressFile(System.String,System.String)">
            <summary>
            Decompress a file using Deflate Algorithm
            </summary>
            <param name="inputFileName"></param>
            <param name="outputFileName"></param>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.CompressionType.GZip">
            <summary>
            http://en.wikipedia.org/wiki/Gzip
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.CompressionType.Deflate">
            <summary>
            http://en.wikipedia.org/wiki/Deflate
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.CompressionType.MiniLZO">
            <summary>
            http://en.wikipedia.org/wiki/Lzo
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.CRC32">
            <summary>
            CRC32 calculation
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.CRC32.#ctor">
            <summary>
            Default constructor, initializes object to the default state
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.CRC32.GetFileCRC32(System.String)">
            <summary>
            Get the CRC for a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.CRC32.Reset">
            <summary>
            Resets object to the default state
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.CRC32.Process(System.Byte)">
            <summary>
            Updates current value with byte
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.CRC32.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates current CRC value with byte array
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.CRC32.Value">
            <summary>
            Get/Set current CRC value
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.Encryption">
            <summary>
            Powerful and Easy to use Encryption Library by Kellerman Software
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.Encryption.r">
            <summary>
            Used to create random strings
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.#ctor(System.String,System.String)">
            <summary>
            Constructor for licensed verson
            </summary>
            <param name="userName"></param>
            <param name="licenseKey"></param>
            <example>
            	<code title="Example" description="" lang="CS">
            //Trial Mode
            Encryption encryption = new Encryption(); 
             
            //License Mode
            Encryption encryption = new Encryption("place user name here", "place license key here");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Trial Mode
            Dim encryption As New Encryption()
             
            'License Mode
            Dim encryption As New Encryption("place user name here", "place license key here")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.#ctor">
            <summary>
            Constructor for 30 day trial
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.CheckLicense(System.String,System.String)">
            <summary>
            The variables below are specific to the licensing component
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.BytesToQuotedPrintable(System.Byte[])">
            <summary>
            Encode bytes to a quoted printable string
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Quoted_printable"/>
            <param name="bytes">The bytes to encode</param>
            <returns>Quoted Printable String OR string.emtpy on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] bytes = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                bytes[i] = (byte) i;
             
            string quotedPrintable = encryption.BytesToQuotedPrintable(bytes);
             
            Console.WriteLine(quotedPrintable);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim bytes(254) As Byte
             
            For i As Integer = 0 To 254
                bytes(i) = CByte(i)
            Next i
             
            Dim quotedPrintable As String = encryption.BytesToQuotedPrintable(bytes)
             
            Console.WriteLine(quotedPrintable)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.BytesToHexString(System.Byte[])">
            <summary>
            Encode bytes to a hex encoded string
            </summary>
            <param name="bytes">The bytes to encode</param>
            <returns>Hex formatted string OR String.empty on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] bytes = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                bytes[i] = (byte)i;
             
            string hexString = encryption.BytesToHexString(bytes);
             
            Console.WriteLine(hexString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim bytes(254) As Byte
             
            For i As Integer = 0 To 254
                bytes(i) = CByte(i)
            Next i
             
            Dim hexString As String = encryption.BytesToHexString(bytes)
             
            Console.WriteLine(hexString)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncodeBase64(System.Byte[])">
            <summary>
            Encode bytes with Base64
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Base64"/>
            <param name="input">Bytes to encode</param>
            <returns>Base64 string OR string.emtpy on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] bytes = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                bytes[i] = (byte)i;
             
            string base64String = encryption.EncodeBase64(bytes);
             
            Console.WriteLine(base64String);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim bytes(254) As Byte
             
            For i As Integer = 0 To 254
                bytes(i) = CByte(i)
            Next i
             
            Dim base64String As String = encryption.EncodeBase64(bytes)
             
            Console.WriteLine(base64String)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecodeBase64(System.String)">
            <summary>
            Decode a string that is Base64 encoded
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Base64"/>
            <param name="input">The string to decode</param>
            <returns>The decoded bytes OR null on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] bytes = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                bytes[i] = (byte)i;
             
            string base64String = encryption.EncodeBase64(bytes);
             
            Console.WriteLine(base64String);
             
            byte[] decodedBytes = encryption.DecodeBase64(base64String);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim bytes(254) As Byte
             
            For i As Integer = 0 To 254
                bytes(i) = CByte(i)
            Next i
             
            Dim base64String As String = encryption.EncodeBase64(bytes)
             
            Console.WriteLine(base64String)
             
            Dim decodedBytes() As Byte = encryption.DecodeBase64(base64String)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.uuEncode(System.String)">
            <summary>
            Encode a string using uuEncode
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Uuencode"/>
            <param name="input">String to encode</param>
            <returns>uuEncoded string or string.empty on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string expected = "fortune123$";
            string encoded = encryption.uuEncode(expected);
            Console.WriteLine(encoded);
            string decoded = encryption.uuDecode(encoded).Trim();
            Console.WriteLine(decoded);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim expected As String = "fortune123$"
            Dim encoded As String = encryption.uuEncode(expected)
            Console.WriteLine(encoded)
            Dim decoded As String = encryption.uuDecode(encoded).Trim()
            Console.WriteLine(decoded)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.uuDecode(System.String)">
            <summary>
            Decode a uuEncoded string
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Uuencode"/>
            <param name="input">uuEncoded string to decode</param>
            <returns>Decoded string OR string.empty on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string expected = "fortune123$";
            string encoded = encryption.uuEncode(expected);
            Console.WriteLine(encoded);
            string decoded = encryption.uuDecode(encoded).Trim();
            Console.WriteLine(decoded);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim expected As String = "fortune123$"
            Dim encoded As String = encryption.uuEncode(expected)
            Console.WriteLine(encoded)
            Dim decoded As String = encryption.uuDecode(encoded).Trim()
            Console.WriteLine(decoded)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.HashString(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.String)">
            <summary>
            Return a Base64 encoded one way hash of a string
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Hash_function_%28cryptography%29"/>
            <param name="hashType">The hash algorithm to use</param>
            <param name="input">The string to hash</param>
            <returns>Hashed string OR string.empty on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string input = "test";
             
            string results = encryption.HashString(HashProvider.SHA512, input);
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input As String = "test"
             
            Dim results As String = encryption.HashString(HashProvider.SHA512, input)
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.HashBytes(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.Byte[])">
            <summary>
            Return a Base64 encoded one way hash of a series of bytes
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Hash_function_%28cryptography%29"/>
            <param name="hashType">The hash algorithm to use</param>
            <param name="input">The bytes to hash</param>
            <returns>The hashed bytes OR string.empty on error</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] bytes = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                bytes[i] = (byte)i;
             
            string results = encryption.HashBytes(HashProvider.SHA512, bytes);
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim bytes(254) As Byte
             
            For i As Integer = 0 To 254
                bytes(i) = CByte(i)
            Next i
             
            Dim results As String = encryption.HashBytes(HashProvider.SHA512, bytes)
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.HashFile(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.String)">
            <summary>
            Hash a file using the specified hash provider
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Hash_function_%28cryptography%29"/>
            <param name="hashType">The hash algorithm to use</param>
            <param name="inputFilePath">The file to hash</param>
            <returns>Base64 Encoded Hash</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("test.txt", "This is a test");
             
            string results = encryption.HashFile(HashProvider.SHA512, "test.txt");
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("test.txt", "This is a test")
             
            Dim results As String = encryption.HashFile(HashProvider.SHA512, "test.txt")
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GenerateRSAKeys">
            <summary>
            Create public and private keys
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/RSA_%28algorithm%29"/>
            <returns>Public and private key pairs in XML</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            AsymmetricKeyPair results = encryption.GenerateRSAKeys();
             
            Console.WriteLine("Public Key Only:");
            Console.WriteLine(results.PublicKeyOnly);
            Console.WriteLine();
             
            Console.WriteLine("Public and Private Key:");
            Console.WriteLine(results.PublicPrivateKeyPair);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim results As AsymmetricKeyPair = encryption.GenerateRSAKeys()
             
            Console.WriteLine("Public Key Only:")
            Console.WriteLine(results.PublicKeyOnly)
            Console.WriteLine()
             
            Console.WriteLine("Public and Private Key:")
            Console.WriteLine(results.PublicPrivateKeyPair)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetSymmetricEncryptionKeySize(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider)">
            <summary>
            Returns symmetric algorithm key size in bits.
            </summary>
            <param name="encryptionType"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            int results = encryption.GetSymmetricEncryptionKeySize(EncryptionProvider.Rijndael);
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim results As Integer = encryption.GetSymmetricEncryptionKeySize(EncryptionProvider.Rijndael)
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptString(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypt and return a base64 encoded string
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The string to encrypt</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptBytes(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.Byte[])">
            <summary>
            Encrypt bytes using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The bytes to encrypt</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] input = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                input[i] = (byte)i;
             
            byte[] encryptedBytes = encryption.EncryptBytes(EncryptionProvider.Rijndael, "My password", input);
            byte[] decryptedBytes = encryption.DecryptBytes(EncryptionProvider.Rijndael, "My password", encryptedBytes);
             
            bool decryptedSucessfully = true;
            for (int i = 0; i &lt; input.Length; i++)
            {
                if (input[i] != decryptedBytes[i])
                {
                    decryptedSucessfully = false;
                    break;
                }
            }
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input(254) As Byte
             
            For i As Integer = 0 To 254
                input(i) = CByte(i)
            Next i
             
            Dim encryptedBytes() As Byte = encryption.EncryptBytes(EncryptionProvider.Rijndael, "My password", input)
            Dim decryptedBytes() As Byte = encryption.DecryptBytes(EncryptionProvider.Rijndael, "My password", encryptedBytes)
             
            Dim decryptedSucessfully As Boolean = True
            For i As Integer = 0 To input.Length - 1
                If input(i) &lt;&gt; decryptedBytes(i) Then
                    decryptedSucessfully = False
                    Exit For
                End If
            Next i
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptMemoryStream(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.IO.MemoryStream)">
            <summary>
            Encrypt the memory stream using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="stream">The memory stream to encrypt</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            MemoryStream input = new MemoryStream();
             
            for (int i = 0; i &lt; 255; i++)
                input.WriteByte((byte) i);
             
            input.Seek(0, SeekOrigin.Begin);
             
            MemoryStream encryptedStream = encryption.EncryptMemoryStream(EncryptionProvider.Rijndael, "My Password", input);
            encryptedStream.Seek(0, SeekOrigin.Begin);
             
            MemoryStream decryptedStream = encryption.DecryptMemoryStream(EncryptionProvider.Rijndael, "My Password", encryptedStream);
            decryptedStream.Seek(0, SeekOrigin.Begin);
             
            input.Seek(0, SeekOrigin.Begin);
             
            bool decryptedSucessfully = true;
            for (int i = 0; i &lt; input.Length; i++)
            {
                byte inputByte = (byte) input.ReadByte();
                byte decryptedByte = (byte) decryptedStream.ReadByte();
             
                if (inputByte != decryptedByte)
                {
                    decryptedSucessfully = false;
                    break;
                }
            }
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input As New MemoryStream()
             
            For i As Integer = 0 To 254
                input.WriteByte(CByte(i))
            Next i
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim encryptedStream As MemoryStream = encryption.EncryptMemoryStream(EncryptionProvider.Rijndael, "My Password", input)
            encryptedStream.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedStream As MemoryStream = encryption.DecryptMemoryStream(EncryptionProvider.Rijndael, "My Password", encryptedStream)
            decryptedStream.Seek(0, SeekOrigin.Begin)
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedSucessfully As Boolean = True
            For i As Integer = 0 To input.Length - 1
                Dim inputByte As Byte = CByte(input.ReadByte())
                Dim decryptedByte As Byte = CByte(decryptedStream.ReadByte())
             
                If inputByte &lt;&gt; decryptedByte Then
                    decryptedSucessfully = False
                    Exit For
                End If
            Next i
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptStream(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Encrypt a stream using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputStream">The stream to encrypt</param>
            <param name="outputStream">The encrypted output stream</param>
            <param name="useBase64">If true, the stream will be base64 encoded</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            MemoryStream input = new MemoryStream();
             
            for (int i = 0; i &lt; 255; i++)
                input.WriteByte((byte)i);
             
            input.Seek(0, SeekOrigin.Begin);
             
            MemoryStream encryptedStream = new MemoryStream();
            encryption.EncryptStream(EncryptionProvider.Rijndael, "My Password", input,encryptedStream,false);
            encryptedStream.Seek(0, SeekOrigin.Begin);
             
            MemoryStream decryptedStream = new MemoryStream();
            encryption.DecryptStream(EncryptionProvider.Rijndael, "My Password", encryptedStream, decryptedStream, false);
            decryptedStream.Seek(0, SeekOrigin.Begin);
             
            input.Seek(0, SeekOrigin.Begin);
             
            bool decryptedSucessfully = true;
            for (int i = 0; i &lt; input.Length; i++)
            {
                byte inputByte = (byte)input.ReadByte();
                byte decryptedByte = (byte)decryptedStream.ReadByte();
             
                if (inputByte != decryptedByte)
                {
                    decryptedSucessfully = false;
                    break;
                }
            }
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input As New MemoryStream()
             
            For i As Integer = 0 To 254
                input.WriteByte(CByte(i))
            Next i
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim encryptedStream As New MemoryStream()
            encryption.EncryptStream(EncryptionProvider.Rijndael, "My Password", input,encryptedStream,False)
            encryptedStream.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedStream As New MemoryStream()
            encryption.DecryptStream(EncryptionProvider.Rijndael, "My Password", encryptedStream, decryptedStream, False)
            decryptedStream.Seek(0, SeekOrigin.Begin)
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedSucessfully As Boolean = True
            For i As Integer = 0 To input.Length - 1
                Dim inputByte As Byte = CByte(input.ReadByte())
                Dim decryptedByte As Byte = CByte(decryptedStream.ReadByte())
             
                If inputByte &lt;&gt; decryptedByte Then
                    decryptedSucessfully = False
                    Exit For
                End If
            Next i
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptFile(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Encrypt a text or binary file using the selected encryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputFilePath">The file to encrypt</param>
            <param name="outputFilePath">The output encrypted file</param>
            <param name="useBase64">If true, the file will be base64 encoded</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt", false);
             
            bool decryptedSucessfully = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt", false);
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt", False)
             
            Dim decryptedSucessfully As Boolean = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt", False)
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptFile(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String,System.String)">
            <summary>
            Encrypt a text or binary file using the selected encryption provider. The file will be base64 encoded.
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputFilePath">The file to encrypt</param>
            <param name="outputFilePath">The output encrypted file</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt");
             
            bool decryptedSucessfully = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt");
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt")
             
            Dim decryptedSucessfully As Boolean = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt")
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptString(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypt a base 64 encoded string
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The string to decrypt</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptBytes(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.Byte[])">
            <summary>
            Decrypt bytes using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="input">The bytes to decrypt</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] input = new byte[255];
             
            for (int i = 0; i &lt; 255; i++)
                input[i] = (byte)i;
             
            byte[] encryptedBytes = encryption.EncryptBytes(EncryptionProvider.Rijndael, "My password", input);
            byte[] decryptedBytes = encryption.DecryptBytes(EncryptionProvider.Rijndael, "My password", encryptedBytes);
             
            bool decryptedSucessfully = true;
            for (int i = 0; i &lt; input.Length; i++)
            {
                if (input[i] != decryptedBytes[i])
                {
                    decryptedSucessfully = false;
                    break;
                }
            }
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input(254) As Byte
             
            For i As Integer = 0 To 254
                input(i) = CByte(i)
            Next i
             
            Dim encryptedBytes() As Byte = encryption.EncryptBytes(EncryptionProvider.Rijndael, "My password", input)
            Dim decryptedBytes() As Byte = encryption.DecryptBytes(EncryptionProvider.Rijndael, "My password", encryptedBytes)
             
            Dim decryptedSucessfully As Boolean = True
            For i As Integer = 0 To input.Length - 1
                If input(i) &lt;&gt; decryptedBytes(i) Then
                    decryptedSucessfully = False
                    Exit For
                End If
            Next i
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptMemoryStream(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.IO.MemoryStream)">
            <summary>
            Decrypt the memory stream using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="stream">The stream to decrypt</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            MemoryStream input = new MemoryStream();
             
            for (int i = 0; i &lt; 255; i++)
                input.WriteByte((byte)i);
             
            input.Seek(0, SeekOrigin.Begin);
             
            MemoryStream encryptedStream = encryption.EncryptMemoryStream(EncryptionProvider.Rijndael, "My Password", input);
            encryptedStream.Seek(0, SeekOrigin.Begin);
             
            MemoryStream decryptedStream = encryption.DecryptMemoryStream(EncryptionProvider.Rijndael, "My Password", encryptedStream);
            decryptedStream.Seek(0, SeekOrigin.Begin);
             
            input.Seek(0, SeekOrigin.Begin);
             
            bool decryptedSucessfully = true;
            for (int i = 0; i &lt; input.Length; i++)
            {
                byte inputByte = (byte)input.ReadByte();
                byte decryptedByte = (byte)decryptedStream.ReadByte();
             
                if (inputByte != decryptedByte)
                {
                    decryptedSucessfully = false;
                    break;
                }
            }
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input As New MemoryStream()
             
            For i As Integer = 0 To 254
                input.WriteByte(CByte(i))
            Next i
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim encryptedStream As MemoryStream = encryption.EncryptMemoryStream(EncryptionProvider.Rijndael, "My Password", input)
            encryptedStream.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedStream As MemoryStream = encryption.DecryptMemoryStream(EncryptionProvider.Rijndael, "My Password", encryptedStream)
            decryptedStream.Seek(0, SeekOrigin.Begin)
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedSucessfully As Boolean = True
            For i As Integer = 0 To input.Length - 1
                Dim inputByte As Byte = CByte(input.ReadByte())
                Dim decryptedByte As Byte = CByte(decryptedStream.ReadByte())
             
                If inputByte &lt;&gt; decryptedByte Then
                    decryptedSucessfully = False
                    Exit For
                End If
            Next i
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptStream(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decrypt a stream using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputStream">The encrypted stream</param>
            <param name="outputStream">The output decrypted stream</param>
            <param name="useBase64">If true, the stream is base64 encoded</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            MemoryStream input = new MemoryStream();
             
            for (int i = 0; i &lt; 255; i++)
                input.WriteByte((byte)i);
             
            input.Seek(0, SeekOrigin.Begin);
             
            MemoryStream encryptedStream = new MemoryStream();
            encryption.EncryptStream(EncryptionProvider.Rijndael, "My Password", input, encryptedStream, false);
            encryptedStream.Seek(0, SeekOrigin.Begin);
             
            MemoryStream decryptedStream = new MemoryStream();
            encryption.DecryptStream(EncryptionProvider.Rijndael, "My Password", encryptedStream, decryptedStream, false);
            decryptedStream.Seek(0, SeekOrigin.Begin);
             
            input.Seek(0, SeekOrigin.Begin);
             
            bool decryptedSucessfully = true;
            for (int i = 0; i &lt; input.Length; i++)
            {
                byte inputByte = (byte)input.ReadByte();
                byte decryptedByte = (byte)decryptedStream.ReadByte();
             
                if (inputByte != decryptedByte)
                {
                    decryptedSucessfully = false;
                    break;
                }
            }
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input As New MemoryStream()
             
            For i As Integer = 0 To 254
                input.WriteByte(CByte(i))
            Next i
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim encryptedStream As New MemoryStream()
            encryption.EncryptStream(EncryptionProvider.Rijndael, "My Password", input, encryptedStream, False)
            encryptedStream.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedStream As New MemoryStream()
            encryption.DecryptStream(EncryptionProvider.Rijndael, "My Password", encryptedStream, decryptedStream, False)
            decryptedStream.Seek(0, SeekOrigin.Begin)
             
            input.Seek(0, SeekOrigin.Begin)
             
            Dim decryptedSucessfully As Boolean = True
            For i As Integer = 0 To input.Length - 1
                Dim inputByte As Byte = CByte(input.ReadByte())
                Dim decryptedByte As Byte = CByte(decryptedStream.ReadByte())
             
                If inputByte &lt;&gt; decryptedByte Then
                    decryptedSucessfully = False
                    Exit For
                End If
            Next i
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptFile(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Decrypt a text or binary file using the selected Decryption provider
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputFilePath">The encrypted file</param>
            <param name="outputFilePath">The output decrypted file</param>
            <param name="useBase64">If true, the file is base64 encoded</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt", false);
             
            bool decryptedSucessfully = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt", false);
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt", False)
             
            Dim decryptedSucessfully As Boolean = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt", False)
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptFile(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String,System.String)">
            <summary>
            Decrypt a text or binary file using the selected Decryption provider. The file will be base64 encoded.
            </summary>
            <param name="encryptionType">The encryption algorithm to use</param>
            <param name="key">The encryption password</param>
            <param name="inputFilePath">The encrypted file</param>
            <param name="outputFilePath">The output decrypted file</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt");
             
            bool decryptedSucessfully = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt");
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt")
             
            Dim decryptedSucessfully As Boolean = encryption.DecryptFile(EncryptionProvider.Rijndael, "My Password", "encrypted.txt", "decrypted.txt")
             
            Console.WriteLine("Decrypted successfully: {0}", decryptedSucessfully)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.AreBytesBase64(System.Byte[],System.Int32)">
            <summary>
            Returns true if all passed bytes are valid base64 characters
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.IsFileEncrypted(System.String,System.Boolean)">
            <summary>
            Returns true if a file is Encrypted by the Kellerman Software Encryption Library
            </summary>
            <param name="filePath">The path to the file</param>
            <param name="strict">Set strict equals false for files encrypted prior to version 1.11</param>
            <remarks>
            	<para>When strict is on, it looks to see if there is a prefix of @KS@ for the file.
                When strict is off the file is simply checked to see if it is Base64 encoded. These
                file types are outside the range of valid Base64 characters and thus are safe to
                have strict turned off for files encrypted with previous versions of the Kellerman
                Encryption Library:</para>
            	<list type="bullet">
            		<item>Text files with spaces in them</item>
            		<item>HTML Files</item>
            		<item>XML Files</item>
            		<item>Any type of Image</item>
            		<item>PDF Files</item>
            		<item>Word Documents</item>
            		<item>Excel Documents</item>
            		<item>MS Access Databases</item>
            		<item>Any type of binary file</item>
            	</list>
            </remarks>
            <returns>True if the file is encrypted</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            bool isEncrypted = encryption.IsFileEncrypted("input.txt", true);
            Console.WriteLine("Is input file encrypted: {0}", isEncrypted);
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt", false);
             
            isEncrypted = encryption.IsFileEncrypted("encrypted.txt", true);
            Console.WriteLine("Is encrypted file encrypted: {0}", isEncrypted);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            Dim isEncrypted As Boolean = encryption.IsFileEncrypted("input.txt", True)
            Console.WriteLine("Is input file encrypted: {0}", isEncrypted)
             
            encryption.EncryptFile(EncryptionProvider.Rijndael, "My Password", "input.txt", "encrypted.txt", False)
             
            isEncrypted = encryption.IsFileEncrypted("encrypted.txt", True)
            Console.WriteLine("Is encrypted file encrypted: {0}", isEncrypted)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.IsStringEncrypted(System.String,System.Boolean)">
            <summary>
            Returns true if a string is encrypted with the Kellerman Encryption Library
            </summary>
            <param name="value">The string to examine</param>
            <param name="strict">For strings encrypted prior to Version 1.11 set strict = false.  It will sometimes give a false positive for some strings.</param>
            <remarks>
            	<para>When strict is on, it looks to see if there is a prefix of @KS@ for the
                string. When strict is off the string is simply checked to see if it is Base64
                encoded. These strings are outside the range of valid Base64 characters or cannot
                be Base64 decoded and thus are safe to have strict turned off for strings encrypted
                with previous versions of the Kellerman Encryption Library:</para>
            	<list type="bullet">
            		<item>Strings less than 10 characters (most passwords)</item>
            		<item>Strings with spaces in them</item>
            		<item>Strings with lengths not evenly divisible by 4</item>
            		<item>
                        Strings that have characters other than: 
                        <para><font color="maroon" size="2">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/+=</font></para></item>
            		<item>SSN</item>
            		<item>VIN</item>
            		<item>Employer IDs</item>
            		<item>Tax IDs</item>
            		<item>Visa</item>
            		<item>Master Card</item>
            		<item>Amex</item>
            		<item>Discover</item>
            		<item>EMail Addresses</item>
            		<item>HTML Strings</item>
            		<item>XML Strings</item>
            	</list>
            	<para class="xmldocbulletlist"></para>
            </remarks>
            <returns>True if the string is encrypted</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
             
            bool isEncrypted = encryption.IsStringEncrypted(unencryptedString, true);
            Console.WriteLine("Is unencyrpted string encrypted: {0}", isEncrypted);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
             
            isEncrypted = encryption.IsStringEncrypted(encryptedString, true);
            Console.WriteLine("Is unencyrpted string encrypted: {0}", isEncrypted);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
             
            Dim isEncrypted As Boolean = encryption.IsStringEncrypted(unencryptedString, True)
            Console.WriteLine("Is unencyrpted string encrypted: {0}", isEncrypted)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
             
            isEncrypted = encryption.IsStringEncrypted(encryptedString, True)
            Console.WriteLine("Is unencyrpted string encrypted: {0}", isEncrypted)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GenerateSixDigitPin(System.String)">
            <summary>
            Generate a six digit PIN based on a string.  Uses CRC32 as a basis. Always generates 6 digits.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string results = encryption.GenerateSixDigitPin("John Smith");
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim results As String = encryption.GenerateSixDigitPin("John Smith")
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetStringAdler32(System.String)">
            <summary>
            Get the Adler 32 Checksum for a string
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Adler-32"/>
            <param name="value">Input String</param>
            <returns>Adler CRC</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            long results = encryption.GetStringAdler32("John Smith");
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim results As Long = encryption.GetStringAdler32("John Smith")
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetStreamAdler32(System.IO.Stream)">
            <summary>
            Get the Adler 32 Checksum for a stream
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Adler-32"/>
            <param name="value">Input Stream</param>
            <returns>Adler CRC</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            long results;
             
            using (FileStream stream = new FileStream("input.txt",FileMode.Open,FileAccess.Read))
                results = encryption.GetStreamAdler32(stream);
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            Dim results As Long
             
            Using stream As New FileStream("input.txt",FileMode.Open,FileAccess.Read)
                results = encryption.GetStreamAdler32(stream)
            End Using
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetFileAdler32(System.String)">
            <summary>
            Get an Adler 32 Checksum for a file
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Adler-32"/>
            <param name="filePath"></param>
            <returns>Adler CRC</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            long results = encryption.GetFileAdler32("input.txt");
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            Dim results As Long = encryption.GetFileAdler32("input.txt")
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetStringCRC32(System.String)">
            <summary>
            Get the CRC 32 for a string
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Crc32"/>
            <param name="value"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            long results = encryption.GetStringCRC32("John Smith");
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim results As Long = encryption.GetStringCRC32("John Smith")
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetStreamCRC32(System.IO.Stream)">
            <summary>
            Get a 32 bit Cyclic Redundency Check for a stream
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Crc32"/>
            <param name="stream"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            long results;
             
            using (FileStream stream = new FileStream("input.txt", FileMode.Open, FileAccess.Read))
                results = encryption.GetStreamCRC32(stream);
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            Dim results As Long
             
            Using stream As New FileStream("input.txt", FileMode.Open, FileAccess.Read)
                results = encryption.GetStreamCRC32(stream)
            End Using
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetFileCRC32(System.String)">
            <summary>
            Get a 32 bit Cyclic Redundency Check for a file
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Crc32"/>
            <param name="filePath"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            File.WriteAllText("input.txt", "This is a test");
             
            long results = encryption.GetFileCRC32("input.txt");
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            File.WriteAllText("input.txt", "This is a test")
             
            Dim results As Long = encryption.GetFileCRC32("input.txt")
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GenerateKey">
            <summary>
            Generate a cryptograpically strong random string to use as a key, salt, or initialization vector
            </summary>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string results = encryption.GenerateKey();
             
            Console.WriteLine(results);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim results As String = encryption.GenerateKey()
             
            Console.WriteLine(results)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.Random256">
            <summary>
            Return a string of 256 random visible characters to be used 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.SecureDirectoryErase(System.String)">
            <summary>
            Securely erase all files and sub directories within a directory
            </summary>
            <param name="directoryPath">The directory to erase</param>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TestDirectory");
            Directory.CreateDirectory(path);
             
            string testFile = Path.Combine(path, "testfile.txt");
            File.WriteAllText(testFile,"This is a test");
             
            encryption.SecureDirectoryErase(path);
             
            bool directoryExists = Directory.Exists(path);
            Console.WriteLine("Directory Exists: {0}", directoryExists);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim path As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TestDirectory")
            Directory.CreateDirectory(path)
             
            Dim testFile As String = Path.Combine(path, "testfile.txt")
            File.WriteAllText(testFile,"This is a test")
             
            encryption.SecureDirectoryErase(path)
             
            Dim directoryExists As Boolean = Directory.Exists(path)
            Console.WriteLine("Directory Exists: {0}", directoryExists)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.SecureDirectoryErase(System.String,System.String)">
            <summary>
            Securely erase files within a directory and sub directories according to the search pattern
            </summary>
            <param name="directoryPath">The directory to erase</param>
            <param name="searchPattern">File wildcard pattern</param>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TestDirectory");
            Directory.CreateDirectory(path);
             
            string testFile = Path.Combine(path, "testfile.txt");
            File.WriteAllText(testFile, "This is a test");
             
            string nonMatchingFile = Path.Combine(path, "testfile.log");
            File.WriteAllText(nonMatchingFile, "This is a test");
             
            encryption.SecureDirectoryErase(path, "*.txt");
             
            bool fileExists = File.Exists(testFile);
            Console.WriteLine("Matching File Exists: {0}", fileExists);
             
            fileExists = File.Exists(nonMatchingFile);
            Console.WriteLine("Non Matching File Exists: {0}", fileExists);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim path As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TestDirectory")
            Directory.CreateDirectory(path)
             
            Dim testFile As String = Path.Combine(path, "testfile.txt")
            File.WriteAllText(testFile, "This is a test")
             
            Dim nonMatchingFile As String = Path.Combine(path, "testfile.log")
            File.WriteAllText(nonMatchingFile, "This is a test")
             
            encryption.SecureDirectoryErase(path, "*.txt")
             
            Dim fileExists As Boolean = File.Exists(testFile)
            Console.WriteLine("Matching File Exists: {0}", fileExists)
             
            fileExists = File.Exists(nonMatchingFile)
            Console.WriteLine("Non Matching File Exists: {0}", fileExists)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.SecureDirectoryErase(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Securely erase files within a directory and sub directories according to the search pattern
            </summary>
            <param name="directoryPath"></param>
            <param name="searchPattern">File wildcard pattern</param>
            <param name="searchOption">Recurse into sub directories</param>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TestDirectory");
            Directory.CreateDirectory(path);
             
            string testFile = Path.Combine(path, "testfile.txt");
            File.WriteAllText(testFile, "This is a test");
             
            string nonMatchingFile = Path.Combine(path, "testfile.log");
            File.WriteAllText(nonMatchingFile, "This is a test");
             
            encryption.SecureDirectoryErase(path, "*.txt", SearchOption.AllDirectories);
             
            bool fileExists = File.Exists(testFile);
            Console.WriteLine("Matching File Exists: {0}", fileExists);
             
            fileExists = File.Exists(nonMatchingFile);
            Console.WriteLine("Non Matching File Exists: {0}", fileExists);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim path As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TestDirectory")
            Directory.CreateDirectory(path)
             
            Dim testFile As String = Path.Combine(path, "testfile.txt")
            File.WriteAllText(testFile, "This is a test")
             
            Dim nonMatchingFile As String = Path.Combine(path, "testfile.log")
            File.WriteAllText(nonMatchingFile, "This is a test")
             
            encryption.SecureDirectoryErase(path, "*.txt", SearchOption.AllDirectories)
             
            Dim fileExists As Boolean = File.Exists(testFile)
            Console.WriteLine("Matching File Exists: {0}", fileExists)
             
            fileExists = File.Exists(nonMatchingFile)
            Console.WriteLine("Non Matching File Exists: {0}", fileExists)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetRandomBytes(System.Int32)">
            <summary>
            Produce an array of random characters
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.SecureFileErase(System.String)">
            <summary>
            Securely delete a file by overwriting with random bytes, renaming and then deleting it
            </summary>
            <param name="filePath"></param>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            string testFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "testfile.txt");
            File.WriteAllText(testFile, "This is a test");
             
            encryption.SecureFileErase(testFile);
             
            bool fileExists = File.Exists(testFile);
            Console.WriteLine("File Exists: {0}", fileExists);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim testFile As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "testfile.txt")
            File.WriteAllText(testFile, "This is a test")
             
            encryption.SecureFileErase(testFile)
             
            Dim fileExists As Boolean = File.Exists(testFile)
            Console.WriteLine("File Exists: {0}", fileExists)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.CompressBytes(KellermanSoftware.NetEncryptionLibrary.CompressionType,System.Byte[])">
            <summary>
            Compress the passed bytes using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] input = new byte[1024];
             
            for (int i = 0; i &lt; 1024; i++)
                input[i] = 5;
             
            byte[] results = encryption.CompressBytes(CompressionType.GZip, input);
            Console.WriteLine("{0} bytes compressed to {1} bytes with GZIP", input.Length, results.Length);
             
            results = encryption.CompressBytes(CompressionType.Deflate, input);
            Console.WriteLine("{0} bytes compressed to {1} bytes with Deflate", input.Length, results.Length);
             
            results = encryption.CompressBytes(CompressionType.MiniLZO, input);
            Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", input.Length, results.Length);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input(1023) As Byte
             
            For i As Integer = 0 To 1023
                input(i) = 5
            Next i
             
            Dim results() As Byte = encryption.CompressBytes(CompressionType.GZip, input)
            Console.WriteLine("{0} bytes compressed to {1} bytes with GZIP", input.Length, results.Length)
             
            results = encryption.CompressBytes(CompressionType.Deflate, input)
            Console.WriteLine("{0} bytes compressed to {1} bytes with Deflate", input.Length, results.Length)
             
            results = encryption.CompressBytes(CompressionType.MiniLZO, input)
            Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", input.Length, results.Length)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecompressBytes(KellermanSoftware.NetEncryptionLibrary.CompressionType,System.Byte[])">
            <summary>
            Decompress the passed bytes using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            byte[] input = new byte[1024];
             
            for (int i = 0; i &lt; 1024; i++)
                input[i] = 5;
             
            byte[] compressedBytes = encryption.CompressBytes(CompressionType.GZip, input);
            Console.WriteLine("{0} bytes compressed to {1} bytes with GZIP", input.Length, compressedBytes.Length);
            byte[] decompressedBytes = encryption.DecompressBytes(CompressionType.GZip, compressedBytes);
             
            compressedBytes = encryption.CompressBytes(CompressionType.Deflate, input);
            Console.WriteLine("{0} bytes compressed to {1} bytes with Deflate", input.Length, compressedBytes.Length);
            decompressedBytes = encryption.DecompressBytes(CompressionType.Deflate, compressedBytes);
             
            compressedBytes = encryption.CompressBytes(CompressionType.MiniLZO, input);
            Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", input.Length, compressedBytes.Length);
            decompressedBytes = encryption.DecompressBytes(CompressionType.MiniLZO, compressedBytes);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim input(1023) As Byte
             
            For i As Integer = 0 To 1023
                input(i) = 5
            Next i
             
            Dim compressedBytes() As Byte = encryption.CompressBytes(CompressionType.GZip, input)
            Console.WriteLine("{0} bytes compressed to {1} bytes with GZIP", input.Length, compressedBytes.Length)
            Dim decompressedBytes() As Byte = encryption.DecompressBytes(CompressionType.GZip, compressedBytes)
             
            compressedBytes = encryption.CompressBytes(CompressionType.Deflate, input)
            Console.WriteLine("{0} bytes compressed to {1} bytes with Deflate", input.Length, compressedBytes.Length)
            decompressedBytes = encryption.DecompressBytes(CompressionType.Deflate, compressedBytes)
             
            compressedBytes = encryption.CompressBytes(CompressionType.MiniLZO, input)
            Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", input.Length, compressedBytes.Length)
            decompressedBytes = encryption.DecompressBytes(CompressionType.MiniLZO, compressedBytes)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.CompressStream(KellermanSoftware.NetEncryptionLibrary.CompressionType,System.IO.Stream)">
            <summary>
            Compress a stream using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; 1024; i++)
                sb.AppendLine("This is a test");
             
            File.WriteAllText("input.txt", sb.ToString());
             
            using (FileStream inputStream = new FileStream("input.txt", FileMode.Open, FileAccess.Read))
            {
                Stream compressedStream = encryption.CompressStream(CompressionType.MiniLZO, inputStream);
                Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", inputStream.Length, compressedStream.Length);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim sb As New StringBuilder()
            For i As Integer = 0 To 1023
                sb.AppendLine("This is a test")
            Next i
             
            File.WriteAllText("input.txt", sb.ToString())
             
            Using inputStream As New FileStream("input.txt", FileMode.Open, FileAccess.Read)
                Dim compressedStream As Stream = encryption.CompressStream(CompressionType.MiniLZO, inputStream)
                Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", inputStream.Length, compressedStream.Length)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecompressStream(KellermanSoftware.NetEncryptionLibrary.CompressionType,System.IO.Stream)">
            <summary>
            Decompress a stream using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="input"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; 1024; i++)
                sb.AppendLine("This is a test");
             
            File.WriteAllText("input.txt", sb.ToString());
             
            using (FileStream inputStream = new FileStream("input.txt", FileMode.Open, FileAccess.Read))
            {
                Stream compressedStream = encryption.CompressStream(CompressionType.MiniLZO, inputStream);
                Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", inputStream.Length, compressedStream.Length);
             
                Stream decompressedStream = encryption.DecompressStream(CompressionType.MiniLZO, compressedStream);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim sb As New StringBuilder()
            For i As Integer = 0 To 1023
                sb.AppendLine("This is a test")
            Next i
             
            File.WriteAllText("input.txt", sb.ToString())
             
            Using inputStream As New FileStream("input.txt", FileMode.Open, FileAccess.Read)
                Dim compressedStream As Stream = encryption.CompressStream(CompressionType.MiniLZO, inputStream)
                Console.WriteLine("{0} bytes compressed to {1} bytes with MiniLZO", inputStream.Length, compressedStream.Length)
             
                Dim decompressedStream As Stream = encryption.DecompressStream(CompressionType.MiniLZO, compressedStream)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.CompressFile(KellermanSoftware.NetEncryptionLibrary.CompressionType,System.String,System.String)">
            <summary>
            Compress a file using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; 1024; i++)
                sb.AppendLine("This is a test");
             
            File.WriteAllText("input.txt", sb.ToString());
             
            encryption.CompressFile(CompressionType.MiniLZO, "input.txt", "compressed.txt");
            encryption.DecompressFile(CompressionType.MiniLZO, "compressed.txt", "decompressed.txt");</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim sb As New StringBuilder()
            For i As Integer = 0 To 1023
                sb.AppendLine("This is a test")
            Next i
             
            File.WriteAllText("input.txt", sb.ToString())
             
            encryption.CompressFile(CompressionType.MiniLZO, "input.txt", "compressed.txt")
            encryption.DecompressFile(CompressionType.MiniLZO, "compressed.txt", "decompressed.txt")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecompressFile(KellermanSoftware.NetEncryptionLibrary.CompressionType,System.String,System.String)">
            <summary>
            Decompress a file using the specified compression type
            </summary>
            <param name="compressionType"></param>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; 1024; i++)
                sb.AppendLine("This is a test");
             
            File.WriteAllText("input.txt", sb.ToString());
             
            encryption.CompressFile(CompressionType.MiniLZO, "input.txt", "compressed.txt");
            encryption.DecompressFile(CompressionType.MiniLZO, "compressed.txt", "decompressed.txt");</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim sb As New StringBuilder()
            For i As Integer = 0 To 1023
                sb.AppendLine("This is a test")
            Next i
             
            File.WriteAllText("input.txt", sb.ToString())
             
            encryption.CompressFile(CompressionType.MiniLZO, "input.txt", "compressed.txt")
            encryption.DecompressFile(CompressionType.MiniLZO, "compressed.txt", "decompressed.txt")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.ValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Checks the status of a certificate, whether it is: expired, untrusted, or trusted
            </summary>
            <param name="cert">Certificate to check</param>
            <returns>The status of the certificate</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.EncryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypt a file with an X509 Certificate
            </summary>
            <param name="inputFilePath">The full path of the file to encrypt</param>
            <param name="outputFilePath">The full path to the output file</param>
            <param name="cert">Public certificate to retreive the public key from</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.DecryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypt a file that was encrypted with a X509 certificate
            </summary>
            <param name="inputFilePath">The full path of the file to decrypt</param>
            <param name="outputFilePath">The full path to the output file</param>
            <param name="cert">The PFX certificate that corresponds to the X509 certificate</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.GetRandomString(System.Int32)">
            <summary>
            Get a random string of the length specified by iLength
            </summary>
            <param name="iLength">Number of characters to generate</param>
            <returns>A Random String</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.RandomChar(System.Int32)">
            <summary>
            Get a Random Character specified by iBase.
            iBase can be 10, 16, or 36.
            </summary>
            <param name="iBase">Base of the random character</param>
            <returns>A single random character string</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.Chr(System.Int32)">
            <summary>
            Get a string based on the specified ASCII code
            </summary>
            <param name="iASCIICode">ASCII Code</param>
            <returns>A Single Character String</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Encryption.CrcEqual(System.String,System.String)">
            <summary>
            Returns true if the CRC is equal for two local files
            </summary>
            <param name="file1">Path to the first file</param>
            <param name="file2">Path to the second file</param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; 1024; i++)
                sb.AppendLine("This is a test");
             
            File.WriteAllText("file1.txt", sb.ToString());
            File.WriteAllText("file2.txt", sb.ToString());
             
            bool filesSame = encryption.CrcEqual("file1.txt", "file2.txt");
            Console.WriteLine("Files same: {0}", filesSame);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            Dim sb As New StringBuilder()
            For i As Integer = 0 To 1023
                sb.AppendLine("This is a test")
            Next i
             
            File.WriteAllText("file1.txt", sb.ToString())
            File.WriteAllText("file2.txt", sb.ToString())
             
            Dim filesSame As Boolean = encryption.CrcEqual("file1.txt", "file2.txt")
            Console.WriteLine("Files same: {0}", filesSame)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Encryption.CipherMethod">
            <summary>
            Support CBC or ECB Cipher Modes for Rijandael or Twofish.  The default is CBC (reccommended)
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation"/>
            <seealso cref="!:http://msdn.microsoft.com/en-us/library/system.security.cryptography.ciphermode.aspx"/>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            //Change the Cipher mode to ECB
            encryption.CipherMethod = System.Security.Cryptography.CipherMode.ECB;
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            'Change the Cipher mode to ECB
            encryption.CipherMethod = System.Security.Cryptography.CipherMode.ECB
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Encryption.Padding">
            <summary>
            Set the padding mode used, the default is ISO10126
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Padding_%28cryptography%29"/>
            <seealso cref="!:http://msdn.microsoft.com/en-us/library/system.security.cryptography.paddingmode.aspx"/>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            //Change the padding mode to PKCS7
            encryption.Padding = PaddingMode.PKCS7;
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            'Change the padding mode to PKCS7
            encryption.Padding = PaddingMode.PKCS7
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Encryption.EncodingMethod">
            <summary>
            Set the encoding method used for converting unicode strings into bytes.  The default is UTF8
            </summary>
            <seealso cref="!:http://msdn.microsoft.com/en-us/library/system.text.encoding.aspx"/>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            //Change the encoding method to ASCII
            encryption.EncodingMethod = Encoding.ASCII;
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            'Change the encoding method to ASCII
            encryption.EncodingMethod = Encoding.ASCII
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Encryption.Salt">
            <summary>
            Salt for Hashing and Encryption
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Salt_%28cryptography%29"/>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            //Change the salt
            encryption.Salt = "This is a salt";
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            'Change the salt
            encryption.Salt = "This is a salt"
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Encryption.InitializationVector">
            <summary>
            Initialization Vector for Encryption
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Initialization_vector"/>
            <example>
            	<code title="Example" description="" lang="CS">
            Encryption encryption = new Encryption(); //Trial Mode
            //Encryption encryption = new Encryption("place user name here", "place license key here"); //License Mode
             
            //Change the initialization vector
            encryption.InitializationVector = "This is an initialization vector";
             
            const string password = "MyPassword";
            const string unencryptedString = "This is the input";
            Console.WriteLine("The unencrypted string: {0}", unencryptedString);
             
            string encryptedString = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString);
            Console.WriteLine("The encrypted string: {0}", encryptedString);
             
            string decryptedString = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString);
            Console.WriteLine("The deencrypted string: {0}", decryptedString);</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim encryption As New Encryption() 'Trial Mode
            'Dim encryption As New Encryption("place user name here", "place license key here") 'License Mode
             
            'Change the initialization vector
            encryption.InitializationVector = "This is an initialization vector"
             
            Const password As String = "MyPassword"
            Const unencryptedString As String = "This is the input"
            Console.WriteLine("The unencrypted string: {0}", unencryptedString)
             
            Dim encryptedString As String = encryption.EncryptString(EncryptionProvider.Rijndael, password, unencryptedString)
            Console.WriteLine("The encrypted string: {0}", encryptedString)
             
            Dim decryptedString As String = encryption.DecryptString(EncryptionProvider.Rijndael, password, encryptedString)
            Console.WriteLine("The deencrypted string: {0}", decryptedString)</code>
            </example>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider">
            <summary>
            The algorithim to use when encrypting
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.DES">
            <summary>
            http://en.wikipedia.org/wiki/Data_Encryption_Standard
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.RC2">
            <summary>
            http://en.wikipedia.org/wiki/RC2
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.Rijndael">
            <summary>
            http://en.wikipedia.org/wiki/Rijndael
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.TripleDES">
            <summary>
            http://en.wikipedia.org/wiki/Triple_DES
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.Blowfish">
            <summary>
            http://en.wikipedia.org/wiki/Blowfish_%28cipher%29
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.Twofish">
            <summary>
            http://en.wikipedia.org/wiki/Twofish
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EncryptionProvider.RSA">
            <summary>
            http://en.wikipedia.org/wiki/RSA_%28algorithm%29
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm">
            <summary>Represents the abstract class from which all implementations of the Classless.Hasher.BlockHashAlgorithm inherit.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.#ctor(System.Int32)">
            <summary>Initializes a new instance of the BlockHashAlgorithm class.</summary>
            <param name="blockSize">The size in bytes of an individual block.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.Initialize">
            <summary>Initializes the algorithm.</summary>
            <remarks>If this function is overriden in a derived class, the new function should call back to
            this function or you could risk garbage being carried over from one calculation to the next.</remarks>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Performs the hash algorithm on the data provided.</summary>
            <param name="array">The array containing the data.</param>
            <param name="ibStart">The position in the array to begin reading from.</param>
            <param name="cbSize">How many bytes in the array to read.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.HashFinal">
            <summary>Performs any final activities required by the hash algorithm.</summary>
            <returns>The final hash value.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.BlockSize">
            <summary>The size in bytes of an individual block.</summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.BufferCount">
            <summary>The number of bytes currently in the buffer waiting to be processed.</summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BlockHashAlgorithm.Count">
            <summary>The number of bytes that have been processed.</summary>
            <remarks>This number does NOT include the bytes that are waiting in the buffer.</remarks>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.GOSTHash">
            <summary>Computes the GOSTHash hash for the input data using the managed library.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.GOSTHash.#ctor">
            <summary>Initializes a new instance of the GOSTHash class.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.GOSTHash.#cctor">
            <summary>Initializes the substitution boxes.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.GOSTHash.Initialize">
            <summary>Initializes the algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.GOSTHash.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.GOSTHash.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.HashAlgorithmParameters">
            <summary>An abstract class that represents the parameters necessary to initialize a hashing algorithm.</summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.HashProvider">
            <summary>
            Hashing Algorithms
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.Byte[])">
            <summary>
            Compute a hash without a salt
            </summary>
            <param name="hashType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Hashing.ComputeHashSalt(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.Byte[],System.String)">
            <summary>
            Compute a hash with a salt
            </summary>
            <param name="hashType"></param>
            <param name="input"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.IO.MemoryStream)">
            <summary>
            Hash a memory stream
            </summary>
            <param name="hashType"></param>
            <param name="memStream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.String)">
            <summary>
            Hash a file
            </summary>
            <param name="hashType"></param>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Hashing.ComputeHash(KellermanSoftware.NetEncryptionLibrary.HashProvider,System.String,System.String)">
            <summary>
            Compute a file hash with a salt
            </summary>
            <param name="hashType"></param>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Hashing.EncodingMethod">
            <summary>
            Set the encoding method used for converting strings into bytes.  The default is UTF8
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.HAVAL">
            <summary>Computes the HAVAL hash for the input data using the managed library.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.HAVAL.#ctor(KellermanSoftware.NetEncryptionLibrary.HAVALParameters)">
            <summary>Initializes a new instance of the HAVAL class.</summary>
            <param name="param">The parameters to utilize in the HAVAL calculation.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.HAVAL.Initialize">
            <summary>Initializes the algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.HAVAL.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.HAVAL.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.HAVALParameters">
            <summary>A class that contains the parameters necessary to initialize a HAVAL algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.HAVALParameters.#ctor(System.Int16,System.Int16)">
            <summary>Initializes a new instance of the HAVALParamters class.</summary>
            <param name="passes">How many transformation passes to do.</param>
            <param name="length">The bit length of the final hash.</param>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.HAVALParameters.Passes">
            <summary>Gets or sets the number of passes.</summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.HAVALParameters.Length">
            <summary>Gets or sets the bit length.</summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.EndianType">
            <summary>The order in which to store the bytes for integers.</summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EndianType.LittleEndian">
            <summary>The Least Significant Byte is first.</summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.EndianType.BigEndian">
            <summary>The Most Significant Byte is first.</summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.Utilities">
            <summary>A container of static utility functions.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Utilities.#ctor">
            <summary>Prevent the compiler from making an unneeded default public constructor.</summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.RIPEMD320">
            <summary>Computes the RIPEMD320 hash for the input data using the managed library.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.RIPEMD320.#ctor">
            <summary>Initializes a new instance of the RIPEMD320 class.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.RIPEMD320.Initialize">
            <summary>Initializes the algorithm.</summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.RIPEMD320.ProcessBlock(System.Byte[],System.Int32)">
            <summary>Process a block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.RIPEMD320.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process the last block of data.</summary>
            <param name="inputBuffer">The block of data to process.</param>
            <param name="inputOffset">Where to start in the block.</param>
            <param name="inputCount">How many bytes need to be processed.</param>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Entry">
            <summary>
            Hold Subscription Entries 
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br/>
            No COM Interop is used<br/>
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br/>
            No COM Interop is used<br/>
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br/>
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables(System.String)">
            <summary>
            A bunch of variable initialization
            </summary>
            <param name="productCode"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromIni(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromRegistry(System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndIni(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistry(System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToIniFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.DefaultString(System.String,System.String)">
            <summary>
            Return a string padded with default characters
            </summary>
            <param name="sOriginal"></param>
            <param name="sDefault"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.RandomSection(System.String,System.String)">
            <summary>
            Random characters with the random checksum
            </summary>
            <param name="sProductCode"></param>
            <param name="sSerial"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.LastSection(System.String,System.String)">
            <summary>
            The last section that has a ton of name checking
            </summary>
            <param name="sFirstName"></param>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeXor(System.String,System.Int32,System.Int32)">
            <summary>
            Return a special subtraction XOR
            </summary>
            <param name="sSentence"></param>
            <param name="iPosition"></param>
            <param name="iSubtract"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.MiddleSection(System.String,System.String)">
            <summary>
            The section after the version section
            </summary>
            <param name="sFirstName"></param>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.VersionSection(System.String)">
            <summary>
            Get the version, random characters, and the last name
            </summary>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NamePart(System.String,System.String)">
            <summary>
            Get the name portion of the license key
            </summary>
            <param name="sFirstName"></param>
            <param name="sLastName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Left(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">String to parse</param>
            <param name="iLength">Left Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeChar(System.String)">
            <summary>
            Return either a letter or a number
            </summary>
            <param name="sString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SafeChecksum(System.String)">
            <summary>
            Get a checksum, altering checksums that could be confused with each other
            </summary>
            <param name="sString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetChecksum(System.String)">
            <summary>
            Get the checksum for a specified string.
            Valid checksum digits are 0-9,A-Z (others are ignored)
            </summary>
            <param name="sDigits">The string to parse</param>
            <returns>The checksum for the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.Char)">
            <summary>
            Get the ASCII value for the character.
            </summary>
            <param name="cInChar">The character to look at.</param>
            <returns>ASCII value of the passed character.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Chr(System.Int32)">
            <summary>
            Get a string based on the specified ASCII code
            </summary>
            <param name="iAsciiCode">ASCII Code</param>
            <returns>A Single Character String</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.IsService">
            <summary>
            Gets a value indicating whether the application is a windows service.
            </summary>
            <value>
            <c>true</c> if this instance is service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.CertificateStatus">
            <summary>
            Indicates if the certificate is expired Untrusted or Trusted
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.PublicKeyEncryption.ValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Checks the status of a certificate, whether it is: expired, untrusted, or trusted
            </summary>
            <param name="cert">Certificate to check</param>
            <returns>The status of the certificate</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.PublicKeyEncryption.EncryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypt a file with an X509 Certificate
            </summary>
            <param name="inPath">The full path of the file to encrypt</param>
            <param name="outPath">The full path to the output file</param>
            <param name="cert">Public certificate to retreive the public key from</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.PublicKeyEncryption.DecryptFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypt a file that was encrypted with a X509 certificate
            </summary>
            <param name="inPath">The full path of the file to decrypt</param>
            <param name="outPath">The full path to the output file</param>
            <param name="cert">The PFX certificate that corresponds to the X509 certificate</param>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.QuotedPrintable">
            <summary>
            Encode a string into quoted printable
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.MAX_KEY_LENGTH">
            <summary>
              Maximum (and recommended) key size in bytes.
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.BLOCK_SIZE">
            <summary>
              Block size in bytes.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Resets the instance with a key material. Allows the switch of
              keys at runtime without any object allocation.
            </summary>
            <param name="key"> 
              Buffer with the (binary) key material.
            </param>
            <param name="nOfs"> 
              Position at which the key material starts in the buffer.
            </param>
            <param name="nLen"> 
              Size of the key material (up to MAX_KEY_LENGTH bytes).
            </param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.EncryptBlock(System.UInt32,System.UInt32,System.UInt32@,System.UInt32@)">
            <see cref="!:BlowfishECB.EncryptBlock"/>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.DecryptBlock(System.UInt32,System.UInt32,System.UInt32@,System.UInt32@)">
            <see cref="!:BlowfishECB.DecryptBlock"/>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.Encrypt(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <see cref="!:BlowfishECB.Encrypt"/>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.Decrypt(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <see cref="!:BlowfishECB.Decrypt"/>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.BlowfishTransform.IsWeakKey">
            <summary>
            To check if the key used is weak, which means that eventually
            an attack is easier to apply than simple brute force on keys;
            due to the randomness such a case is very unlikely to happen.
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.InitializeAlgorithm(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.GetKeySize(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider)">
            <summary>
            Returns symmetric algorithm key size in bits.
            </summary>
            <param name="encryptionType"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Encrypt(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.Byte[])">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Encrypt(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Encrypt(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String,System.Boolean)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Decrypt(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.Byte[])">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Decrypt(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Decrypt(KellermanSoftware.NetEncryptionLibrary.EncryptionProvider,System.String,System.String,System.Boolean)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.PaddingMode">
            <summary>
            Set the padding mode of the algorithm
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.CipherMethod">
            <summary>
            Set the cipher method of the algorithm
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.EncodingMethod">
            <summary>
            Set the encoding method used for converting strings into bytes.  The default is UTF8
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.SymetricEncryption.SymmetricEncryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.Twofish">
            <summary>
            Summary description for Twofish encryption algorithm of which more information can be found at http://www.counterpane.com/twofish.html. 
            This is based on the MS cryptographic framework and can therefore be used in place of the RijndaelManaged classes
            provided by MS in System.Security.Cryptography and the other related classes
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Twofish.#ctor">
            <summary>
            This is the Twofish constructor.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Twofish.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates an object that supports ICryptoTransform that can be used to encrypt data using the Twofish encryption algorithm.
            </summary>
            <param name="key">A byte array that contains a key. The length of this key should be equal to the KeySize property</param>
            <param name="iv">A byte array that contains an initialization vector. The length of this IV should be equal to the BlockSize property</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Twofish.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates an object that supports ICryptoTransform that can be used to decrypt data using the Twofish encryption algorithm.
            </summary>
            <param name="key">A byte array that contains a key. The length of this key should be equal to the KeySize property</param>
            <param name="iv">A byte array that contains an initialization vector. The length of this IV should be equal to the BlockSize property</param>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Twofish.GenerateIV">
            <summary>
            Generates a random initialization Vector (IV). 
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.Twofish.GenerateKey">
            <summary>
            Generates a random Key. This is only really useful in testing scenarios.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEncryptionLibrary.Twofish.Mode">
            <summary>
            Override the Set method on this property so that we only support CBC and EBC
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.TwofishBase">
            <summary>
            Summary description for TwofishBase.
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.TwofishEncryption">
            <summary>
            Summary description for TwofishEncryption.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEncryptionLibrary.TwofishEncryption.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transform a block depending on whether we are encrypting or decrypting
            </summary>
            <param name="inputBuffer"></param>
            <param name="inputOffset"></param>
            <param name="inputCount"></param>
            <param name="outputBuffer"></param>
            <param name="outputOffset"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetEncryptionLibrary.XOR">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.Util">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cInt(System.Object)">
            <summary>
            Convert the passed object into an integer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cStr(System.Object)">
            <summary>
            Convert any object to a string
            </summary>
            <param name="value">Object to convert</param>
            <returns>A string or string.empty</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cDate(System.Object)">
            <summary>
            Convert the passed object into a date or return the default date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetCurrentDirectory">
            <summary>
            Get the current directory of the executing assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.PathSlash(System.String)">
            <summary>
            Ensure the passed string ends with a directory seperator character unless the string is blank.
            </summary>
            <param name="path">The string to append the backslash to.</param>
            <returns>String with a "/" on the end</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
    </members>
</doc>
